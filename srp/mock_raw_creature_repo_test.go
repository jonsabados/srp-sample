// Code generated by mockery. DO NOT EDIT.

package srp

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRawCreatureRepo is an autogenerated mock type for the RawCreatureRepo type
type MockRawCreatureRepo struct {
	mock.Mock
}

type MockRawCreatureRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRawCreatureRepo) EXPECT() *MockRawCreatureRepo_Expecter {
	return &MockRawCreatureRepo_Expecter{mock: &_m.Mock}
}

// CreateCreature provides a mock function with given fields: ctx, name, description
func (_m *MockRawCreatureRepo) CreateCreature(ctx context.Context, name string, description string) (Creature, error) {
	ret := _m.Called(ctx, name, description)

	if len(ret) == 0 {
		panic("no return value specified for CreateCreature")
	}

	var r0 Creature
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (Creature, error)); ok {
		return rf(ctx, name, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) Creature); ok {
		r0 = rf(ctx, name, description)
	} else {
		r0 = ret.Get(0).(Creature)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRawCreatureRepo_CreateCreature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCreature'
type MockRawCreatureRepo_CreateCreature_Call struct {
	*mock.Call
}

// CreateCreature is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - description string
func (_e *MockRawCreatureRepo_Expecter) CreateCreature(ctx interface{}, name interface{}, description interface{}) *MockRawCreatureRepo_CreateCreature_Call {
	return &MockRawCreatureRepo_CreateCreature_Call{Call: _e.mock.On("CreateCreature", ctx, name, description)}
}

func (_c *MockRawCreatureRepo_CreateCreature_Call) Run(run func(ctx context.Context, name string, description string)) *MockRawCreatureRepo_CreateCreature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRawCreatureRepo_CreateCreature_Call) Return(_a0 Creature, _a1 error) *MockRawCreatureRepo_CreateCreature_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRawCreatureRepo_CreateCreature_Call) RunAndReturn(run func(context.Context, string, string) (Creature, error)) *MockRawCreatureRepo_CreateCreature_Call {
	_c.Call.Return(run)
	return _c
}

// GetCreature provides a mock function with given fields: ctx, id
func (_m *MockRawCreatureRepo) GetCreature(ctx context.Context, id int64) (CreatureLookupResult, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCreature")
	}

	var r0 CreatureLookupResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (CreatureLookupResult, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) CreatureLookupResult); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(CreatureLookupResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRawCreatureRepo_GetCreature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCreature'
type MockRawCreatureRepo_GetCreature_Call struct {
	*mock.Call
}

// GetCreature is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockRawCreatureRepo_Expecter) GetCreature(ctx interface{}, id interface{}) *MockRawCreatureRepo_GetCreature_Call {
	return &MockRawCreatureRepo_GetCreature_Call{Call: _e.mock.On("GetCreature", ctx, id)}
}

func (_c *MockRawCreatureRepo_GetCreature_Call) Run(run func(ctx context.Context, id int64)) *MockRawCreatureRepo_GetCreature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockRawCreatureRepo_GetCreature_Call) Return(_a0 CreatureLookupResult, _a1 error) *MockRawCreatureRepo_GetCreature_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRawCreatureRepo_GetCreature_Call) RunAndReturn(run func(context.Context, int64) (CreatureLookupResult, error)) *MockRawCreatureRepo_GetCreature_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRawCreatureRepo creates a new instance of MockRawCreatureRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRawCreatureRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRawCreatureRepo {
	mock := &MockRawCreatureRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
